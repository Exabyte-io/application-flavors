# General test configuration options

# Python files will be copied from this directory
asset_path: ../../assets/python/ml/

# Specific assets that are needed for the test (such as a pre-rendered settings.py)
fixtures:
  path: "fixtures"
  settings: settings.py
  regression:
    training_set_name: regression_training_data.csv
    predict_set_name: regression_predict_data.csv
  classification:
    training_set_name: classification_training_data.csv
    predict_set_name: classification_predict_data.csv
  clustering:
    training_set_name: clustering_blobs.csv
    predict_set_name: clustering_blobs.csv

# Specific files and directories to remove during test cleanup
files_to_remove:
  - settings.py
  - .job_context

# Specific extensions to remove during test cleanup
extensions_to_remove:
  - .csv
  - .png
  - .j2.py

# ============================================================================
# Shorthand definitions for the various flavors we've made so far. Used in the "Test Cases" document below.
# Naming convention is <some_prefix>_<short_string_for_file>
#
# Prefixes below:
# IO - I/O
# PRE - Pre-Processing
# REG - Regression
# CLS - Classification
# UNS - Unsupervised
# POS - Post-Processing
#
# The short strings for files are generally based on their name. For example:
# tts = train_test_split
# mm = min_max_scaler
# krr = kernelized_ridge_regression
# gbt = gradboosted_trees_regression
unit_shortnames:
  IO_csv: "pyml:data_input:read_csv:pandas.j2.py"
  IO_tts: "pyml:data_input:train_test_split:sklearn.j2.py"
  PRE_mm: "pyml:pre_processing:min_max_scaler:sklearn.j2.py"
  PRE_rd: "pyml:pre_processing:remove_duplicates:pandas.j2.py"
  PRE_rm: "pyml:pre_processing:remove_missing:pandas.j2.py"
  PRE_st: "pyml:pre_processing:standardization:sklearn.j2.py"
  REG_abt: "pyml:model:adaboosted_trees_regression:sklearn.j2.py"
  REG_btr: "pyml:model:bagged_trees_regression:sklearn.j2.py"
  REG_gbt: "pyml:model:gradboosted_trees_regression:sklearn.j2.py"
  REG_krr: "pyml:model:kernel_ridge_regression:sklearn.j2.py"
  REG_lasso: "pyml:model:lasso_regression:sklearn.j2.py"
  REG_mlp: "pyml:model:multilayer_perceptron:sklearn.j2.py"
  REG_rf: "pyml:model:random_forest_regression:sklearn.j2.py"
  REG_rr: "pyml:model:ridge_regression:sklearn.j2.py"
  POS_pp: "pyml:post_processing:parity_plot:matplotlib.j2.py"

# ============================================================================
# Test cases
# Each key represents a different test name
# Each value underneath the key represents a shorthand for a file (see above)
# Scripts wil be executed in the exact sequence that they are given in

tests:
  ReadCSV_MinMax_RidgeReg_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - PRE_mm
      - REG_rr
      - POS_pp


  ReadCSV_MinMax_RemoveDupes_RandomForest_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - PRE_mm
      - PRE_rd
      - REG_rf
      - POS_pp

  ReadCSV_MinMax_RemoveMissing_MLP_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - PRE_mm
      - PRE_rm
      - REG_mlp
      - POS_pp

  ReadCSV_Standardize_LASSO_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - PRE_st
      - REG_lasso
      - POS_pp

  ReadCSV_TrainTest_Standardize_KernelizedRidge_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - IO_tts
      - PRE_st
      - REG_krr
      - POS_pp

  ReadCSV_Standardize_GradientBoostedTrees_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - PRE_st
      - REG_gbt
      - POS_pp

  ReadCSV_TrainTest_MinMax_BaggedTrees_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - IO_tts
      - PRE_mm
      - REG_btr
      - POS_pp

  ReadCSV_MinMax_AdaptiveBoostedTrees_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - PRE_mm
      - REG_abt
      - POS_pp

  ReadCSV_TrainTest_MinMax_Standardize_MLP_Parity:
    category: regression
    units_to_run:
      - IO_csv
      - IO_tts
      - PRE_mm
      - REG_mlp
      - POS_pp
